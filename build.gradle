//打包: gradlew -x test clean build 成功后发布:gradlew -x test publish -Dorg.gradle.internal.http.socketTimeout=200000 -Dorg.gradle.internal.http.connectionTimeout=200000
//然后登录https://oss.sonatype.org/#stagingRepositories来查看,你的提交在未处理前，是`open`状态，然后点击`Close`按钮;然后等一会点击`Release`来发布

buildscript {
  repositories {
    //mavenLocal()
    //maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }  //优先使用阿里的镜像
    mavenCentral()
  }

  ext {
    queryDslVersion = '4.4.0'    
    erupt = [version : '1.10.12']
    
    querydslGeneratedSourcesDir = file("$projectDir/src/main/generated")
  }
   
  dependencies {
    // Required by QueryDSL GenericExporter
    classpath("com.querydsl:querydsl-codegen:${queryDslVersion}")

    classpath("xyz.erupt:erupt-jpa:${erupt.version}")  //JPA
    classpath("xyz.erupt:erupt-upms:${erupt.version}")  //用户权限管理
    classpath files("lib/erupt-bi-${erupt.version}.jar") //BI模块
  }
}

plugins {
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java-library'
  id 'maven-publish'
  id 'signing' //使用signing plugin做数字签名
}

apply from: rootDir.canonicalPath + '/.gradle/publish.gradle'

sourceSets {
  main {
    java {
      srcDirs += [querydslGeneratedSourcesDir]
    }
  }
}

compileJava {
  options.compilerArgs << "-parameters" << "-Xlint:deprecation"
  options.deprecation = true
  
  doFirst {
    /*
     * This is a workaround to delete the file that will be created by the annotation processor if it already exists.
     * There is a known bug in the Java compiler and JDK 8 which should be fixed at JDK 9.
     * http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8067747 <-- Master report
     * http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8146348 <-- duplicates master report
     */
    if ( querydslGeneratedSourcesDir.exists() ) {
      FileCollection collection = files { querydslGeneratedSourcesDir.listFiles() }
      collection.each { delete it }
    }
    querydslGeneratedSourcesDir.mkdirs()
    
    println "Generate QueryDsl CLass..."
    println "options.compilerArgs:"+options.compilerArgs
    
    new com.querydsl.codegen.GenericExporter().with {
      setKeywords(com.querydsl.codegen.Keywords.JPA)
      setEntityAnnotation(javax.persistence.Entity.class)
      setEmbeddableAnnotation(javax.persistence.Embeddable.class)
      setEmbeddedAnnotation(javax.persistence.Embedded.class)
      setSupertypeAnnotation(javax.persistence.MappedSuperclass.class)
      setSkipAnnotation(javax.persistence.Transient.class)
      setTargetFolder(querydslGeneratedSourcesDir)
      export("xyz.erupt.jpa")
      export("xyz.erupt.upms")
      export("xyz.erupt.bi")
    }
  }

}

group = 'xyz.erup'
version = '1.10.12'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
  queryDslVersion = '4.4.0'
  erupt = [version : '1.10.12']
}

jar {
  manifest {
    attributes 'Built-By': 'wjw465150@gmail.com',
    'Build-Name': "${project.name}",
    'Build-Version': "${project.version}",
    'Build-URL': 'https://github.com/wjw465150/erupt-dsl'
  }
  excludes = ['**/test/**']
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
 // 定义发布什么
 publications {
   mavenJava(MavenPublication) {
     // groupId,artifactId,version，如果不定义，则会按照默认值执行
     groupId = "com.github.wjw465150"  //Sonatype上的Issue里填写的`Group Id`,可以跟package路径完全不一样
     artifactId = "erupt-dsl"
     version = project.version

     from components.java
     versionMapping {  //为了解决: Gradle, SpringBoot, MavenPublish - Publication only contains dependencies and/or constraints without a version
       usage('java-api') {
         fromResolutionOf('runtimeClasspath')
       }
       usage('java-runtime') {
         fromResolutionResult()
       }
     }

     pom {
       // 构件名称
       // 区别于artifactId，可以理解为artifactName
       name = project.name
       // 构件描述
       description = 'Erupt Project QueryDsl Extension module.'
       // 构件主页
       url = 'https://github.com/wjw465150/erupt-dsl'
       // 许可证名称和地址
       licenses {
         license {
           name = 'The Apache License, Version 2.0'
           url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
           distribution = 'Erupt Project QueryDsl Extension module.'
         }
       }
       // 开发者信息
       developers {
         developer {
           id = 'wjw465150'
           name = 'wjw465150'
           email = 'wjw465150@gmail.com'
         }
       }
       // 版本控制仓库地址
       scm {
         url = "https://github.com/wjw465150/erupt-dsl"
         connection = "https://github.com/wjw465150/erupt-dsl.git"
         developerConnection = "https://github.com/wjw465150/erupt-dsl.git"
       }
     }
   }
 }

 // 定义发布到哪里
 repositories {
   maven {
     url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
     credentials {
       // 这里就是之前在issues.sonatype.org注册的账号,这些敏感信息为了防止泄露,我放到了`.gradle/publish.gradle`目录下
       username sonatypeUsername
       password sonatypePassword
     }
   }
 }
}

//为所有的jar包做数字签名
signing {
 sign publishing.publications.mavenJava
}

repositories {
  //mavenLocal()
  //maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }  //优先使用阿里的镜像
  mavenCentral()
}

//在dependencyManagement元素中声明所依赖的jar包的版本号等信息，那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号。
//Maven会沿着父子层级向上寻找拥有dependencyManagement 元素的项目，然后使用它指定的版本号。
//dependencyManagement中定义的只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖。
dependencyManagement {
  imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:2.4.13")
  }
}

dependencies {
  implementation group: 'xyz.erupt', name: 'erupt-upms', version: "${erupt.version}"  //用户权限管理  
  implementation files("lib/erupt-bi-${erupt.version}.jar") //BI模块
  
  // QueryDSL
  implementation("com.querydsl:querydsl-jpa:${queryDslVersion}")
  annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

}

